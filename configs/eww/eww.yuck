(defwindow desktop
  :monitor 0
  :geometry (geometry :x "0%" :y "0%" :width "100%" :height "100%")
  :stacking "bg"
  :focusable false
  :exclusive false
  (desktop-widget))

(defwidget desktop-widget []
  (box :class "desktop-container"
       :orientation "v"
    (top-section)
    (center-section)
    (bottom-section)))

(defwidget top-section []
  (centerbox :class "top-bar"
    (workspaces)
    (clock-widget)
    (system-quick)))

(defwidget workspaces []
  (box :class "workspaces"
       :orientation "h"
       :spacing 6
    (for workspace in workspace-data
      (button :class "workspace ${workspace.active ? 'active' : workspace.occupied ? 'occupied' : 'empty'}"
              :onclick "hyprctl dispatch workspace ${workspace.id}"
              "${workspace.id}"))))

(defwidget clock-widget []
  (box :class "clock-section"
       :orientation "v"
       :halign "center"
    (label :class "time-top" :text time-display)
    (label :class "date-top" :text date-display)))

(defwidget system-quick []
  (box :class "system-quick"
       :orientation "h"
       :spacing 10
    (label :class "cpu-quick" :text "CPU ${cpu}%")
    (label :class "ram-quick" :text "RAM ${memory}%")
    (label :class "temp-quick" :text "${temp}°C")))

(defwidget center-section []
  (box :class "center-content"
       :orientation "v"
       :valign "center"
       :halign "center"
       :space-evenly false
    (main-clock)
    (system-stats)
    (power-controls)))

(defwidget main-clock []
  (box :class "main-clock"
       :orientation "v"
       :halign "center"
       :spacing 8
    (label :class "time-large" :text time-display)
    (label :class "date-large" :text date-display)
    (label :class "uptime" :text "Uptime: ${uptime}")))

(defwidget system-stats []
  (box :class "stats-container"
       :orientation "h"
       :spacing 24
       :halign "center"
    (stat-card :icon "" :label "CPU" :value "${cpu}%" :class "cpu")
    (stat-card :icon "" :label "MEMORY" :value "${memory}%" :class "memory")
    (stat-card :icon "" :label "DISK" :value "${disk}%" :class "disk")
    (stat-card :icon "" :label "TEMP" :value "${temp}°C" :class "temp")))

(defwidget stat-card [icon label value class]
  (box :class "stat-card ${class}"
       :orientation "v"
       :spacing 4
       :halign "center"
    (label :class "stat-icon" :text icon)
    (label :class "stat-label" :text label)
    (label :class "stat-value" :text value)))

(defwidget power-controls []
  (box :class "power-controls"
       :orientation "h"
       :spacing 12
       :halign "center"
    (button :class "power-btn exit" 
            :onclick "hyprctl dispatch exit" 
            :tooltip "Exit Hyprland" "")
    (button :class "power-btn reboot" 
            :onclick "systemctl reboot" 
            :tooltip "Reboot" "")
    (button :class "power-btn suspend" 
            :onclick "systemctl suspend" 
            :tooltip "Suspend" "")
    (button :class "power-btn lock" 
            :onclick "hyprlock" 
            :tooltip "Lock" "")))

(defwidget bottom-section []
  (box :class "bottom-bar"
       :orientation "h"
       :halign "center"
    (weather-widget)))

(defwidget weather-widget []
  (box :class "weather"
       :orientation "h"
       :spacing 8
       :halign "center"
    (label :class "weather-icon" :text weather-icon)
    (label :class "weather-temp" :text "${weather-temp}°C")
    (label :class "weather-desc" :text weather-desc)))

;; Variables
(deflisten workspace-data :initial "[]"
  "~/.config/eww/scripts/workspaces.sh")

(defpoll time-display :interval "1s" :initial "00:00:00"
  "date '+%H:%M:%S'")

(defpoll date-display :interval "30s" :initial "Loading..."
  "date '+%A, %B %d'")

(defpoll cpu :interval "2s" :initial "0"
  "~/.config/eww/scripts/cpu.sh")

(defpoll memory :interval "3s" :initial "0"
  "~/.config/eww/scripts/memory.sh")

(defpoll disk :interval "30s" :initial "0"
  "~/.config/eww/scripts/disk.sh")

(defpoll temp :interval "5s" :initial "0"
  "~/.config/eww/scripts/temperature.sh")

(defpoll uptime :interval "60s" :initial "0m"
  "uptime -p | sed 's/up //'")

(defpoll weather-temp :interval "10m" :initial "20"
  "~/.config/eww/scripts/weather.sh temp")

(defpoll weather-desc :interval "10m" :initial "Clear"
  "~/.config/eww/scripts/weather.sh desc")

(defpoll weather-icon :interval "10m" :initial "☀"
  "~/.config/eww/scripts/weather.sh icon")
